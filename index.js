const express = require("express");
const axios = require("axios");
const ytdl = require("ytdl-core");
const app = express();
require("dotenv").config();

const prefix = process.env.PREFIX || ".";
const port = process.env.PORT || 3000;
const pairSite = process.env.PAIR_SITE || "https://thugkeed-lite-md-pair.vercel.app"; // your deployed pair site

app.use(express.json());

app.get("/", (req, res) => {
  res.send(`
    <h2>🤖 THUGKEED-LITE-MD Bot is Running!</h2>
    <p><strong>Pair your bot at:</strong> <a href="${pairSite}" target="_blank">${pairSite}</a></p>
    <p><strong>Command prefix:</strong> ${prefix}</p>
  `);
});

// Commands
app.post("/command", async (req, res) => {
  const { command, args } = req.body;
  const fullCommand = `${prefix}${command}`;
  try {
    switch (fullCommand) {
      case `${prefix}play`:
        if (!args || args.length === 0) return res.json({ error: "No song name provided" });
        const songName = args.join(" ");
        return await handlePlay(songName, res);

      case `${prefix}image`:
        if (!args || args.length === 0) return res.json({ error: "No prompt provided" });
        const prompt = args.join(" ");
        return await handleImage(prompt, res);

      case `${prefix}video`:
        if (!args || args.length === 0) return res.json({ error: "No video URL provided" });
        const videoUrl = args[0];
        return await handleVideo(videoUrl, res);

      case `${prefix}owner`:
        return res.json({ message: "Bot by THUGKEED 💀", contact: "https://whatsapp.com/channel/0029VbB7a9v6LwHqDUERef0M" });

      case `${prefix}repo`:
        return res.json({ message: "GitHub Repo", link: "https://github.com/thugkeedxxx/THUGKEED-LITE-MD" });

      default:
        return res.json({ error: `Unknown command: ${command}` });
    }
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Command failed!" });
  }
});

async function handlePlay(songName, res) {
  try {
    const searchUrl = `https://yt-api-2.onrender.com/search?q=${encodeURIComponent(songName)}`;
    const { data } = await axios.get(searchUrl);
    const video = data.results[0];

    if (!video) return res.json({ error: "No results found!" });

    const downloadUrl = `https://thug-yt.vercel.app/api/mp3?url=https://www.youtube.com/watch?v=${video.id}`;
    return res.json({
      title: video.title,
      duration: video.duration,
      download: downloadUrl,
      note: "🔊 Powered by THUGKEED-LITE-MD"
    });
  } catch (err) {
    return res.status(500).json({ error: "Failed to fetch song" });
  }
}

async function handleImage(prompt, res) {
  try {
    const imgRes = await axios.get(`https://lexica-api.vercel.app/api?q=${encodeURIComponent(prompt)}`);
    const image = imgRes.data.images[0];
    if (!image) return res.json({ error: "No image found!" });

    return res.json({
      prompt,
      image: image.src,
      note: "🖼️ Generated by THUGKEED-LITE-MD"
    });
  } catch (err) {
    return res.status(500).json({ error: "Image generation failed" });
  }
}

async function handleVideo(url, res) {
  try {
    if (!ytdl.validateURL(url)) return res.json({ error: "Invalid YouTube URL!" });
    const info = await ytdl.getInfo(url);
    const format = ytdl.chooseFormat(info.formats, { quality: "18" });

    res.json({
      title: info.videoDetails.title,
      download: format.url,
      note: "🎥 Video by THUGKEED-LITE-MD"
    });
  } catch (err) {
    res.status(500).json({ error: "Failed to fetch video" });
  }
}

app.listen(port, () => {
  console.log(`🤖 THUGKEED-LITE-MD is running on http://localhost:${port}`);
});
